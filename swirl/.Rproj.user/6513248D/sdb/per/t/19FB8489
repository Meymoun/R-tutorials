{
    "collab_server" : "",
    "contents" : "# summarize is most powerful when applied to grouped data\n\n# break up the dataset into groups of rows based on the values of one or more variables\n\n# load package\nlibrary(dplyr)\n\n# put data frame in \"data frame tbl\"\ncran <- tbl_df(mydf)\n\n# remove original dataset from workspace\nrm('mydf')\n\n# group the data by package name\nby_package <- group_by(cran, package)\n\n# check average size for each package\nsummarize(by_package, mean(size))\n\n# n_distinct is the same as lenght(unique(x))\n\npack_sum <- summarize(by_package,\n                      count = n(),\n                      unique = n_distinct(ip_id),\n                      countries = n_distinct(country),\n                      avg_bytes = mean(size))\n\n# the count column created with n() contains the total number of rows for each package \n# the 'unique' column, created with n_distinct(ip_id), \n# gives the total number of unique downloads for each package\n\n# the 'countries' column, created with n_distinct(country), \n# provides the number of countries in which each package was downloaded\n# the 'avg_bytes' column, created with mean(size), \n# contains the mean download size (in bytes) for each package.\n\n# 99% sample quantile\nquantile(pack_sum$count, probs = 0.99)\n\n# select packages that had more than 679 downloads\ntop_counts <- filter(pack_sum, count > 679)\n\n# 61 packages in our top 1%, but dplyr only shows the first 10 rows, therefore:\nView(top_counts)\n# to see all of them\n\n# arrange in descending order. Highest count first. \ntop_counts_sorted <- arrange(top_counts, desc(count))\n\n# find unique downloads, 99 % quantile\nquantile(pack_sum$unique, probs = 0.99)\n\n# find top 1 %\ntop_unique <- filter(pack_sum, unique > 465)\n\n# arrange nr of unique downloads in descending order\ntop_unique_sorted <- arrange(top_unique, desc(unique))\n\n######################################\n\nby_package <- group_by(cran, package)\npack_sum <- summarize(by_package,\n                      count = n(),\n                      unique = n_distinct(ip_id),\n                      countries = n_distinct(country),\n                      avg_bytes = mean(size))\n\n\n# select the countries with more than 60 downloads\n# arrange first by country, then size\ntop_countries <- filter(pack_sum, countries > 60)\nresult1 <- arrange(top_countries, desc(countries), avg_bytes)\n\n# Print the results to the console.\nprint(result1)\n\n#######################################\n\n# same result, different approach:\n# chaining\n# %>% is read as \"then\"\n\nresult3 <-\n  cran %>%\n  group_by(package) %>%\n  summarize(count = n(),\n            unique = n_distinct(ip_id),\n            countries = n_distinct(country),\n            avg_bytes = mean(size)\n  ) %>%\n  filter(countries > 60) %>%\n  arrange(desc(countries), avg_bytes)\n\n# Print result to console\nprint(result3)\n\n\n#######################################\n\n# select columns from dataset cran\ncran %>%\n  select(ip_id, country, package, size) %>%\n  print\n\n#######################################\n\n# add size_mb to dataset\n\ncran %>%\n  select(ip_id, country, package, size) %>%\n  mutate(size_mb = size /2^20) %>%\n  print\n\n######################################\n\n# filter size_mb less than or equal to 0.5\ncran %>%\n  select(ip_id, country, package, size) %>%\n  mutate(size_mb = size / 2^20) %>%\n  filter(size_mb <= 0.5) %>%\n  print\n\n######################################\n\n# arrange in descending order\n\ncran %>%\n  select(ip_id, country, package, size) %>%\n  mutate(size_mb = size / 2^20) %>%\n  filter(size_mb <= 0.5) %>%\n  arrange(desc(size_mb)) %>% \n  print\n\n\n\n\n",
    "created" : 1497969780645.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2791473479",
    "id" : "19FB8489",
    "lastKnownWriteTime" : 1497963517,
    "last_content_update" : 1497963517,
    "path" : "~/Summer project/swirl/Getting and cleaning data/grouping_and_chaining_with_dplyr.R",
    "project_path" : "Getting and cleaning data/grouping_and_chaining_with_dplyr.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}