{
    "collab_server" : "",
    "contents" : "# arithmetic operators: `+`, `-`, `*`, and `/`\n\n# is TRUE equal to TRUE?\nTRUE == TRUE\n# TRUE\n\n# logical expressions can be grouped by parenthesis so that the entire \n# expression (TRUE == TRUE) == TRUE evaluates to TRUE.\n# test this:\n(FALSE == TRUE) == FALSE\n# TRUE\n\n# is 6 equal to 7?\n6 == 7\n# FALSE\n\n# test if 6 is less than 7\n6 < 7\n# TRUE \n\n# is 10 less than or equal to 10?\n10 <= 10\n# TRUE\n\n# is 5 not equal to 7?\n5 != 7\n\n# negate a whole expression, check if the condition is true using both \n# the equals operator and the NOT (!) operator\n!(5 == 7)\n\n# the NOT operator `!` negates logical expressions so that TRUE expressions become FALSE \n# and FALSE expressions become TRUE\n\n# AND operators: `&` and `&&` \n# work similarly, if both right and left operands of ANDs are TRUE, the expression is TRUE\n# otherwise: FALSE\n\nFALSE & FALSE\n# FALSE\n\n# evaluate accross a vector\nTRUE & c(TRUE, FALSE, FALSE)\n# TRUE FALSE FALSE\n\n# && only evaluates the expression for the first member of a vector. \n# The other elements are not evaluated at all.\nTRUE && c(TRUE, FALSE, FALSE)\n# TRUE\n\n# OR operator `|` evaluate to TRUE if either the left or the right operand is TRUE\n# both TRUE: TRUE\n# if neither are TRUE: FALSE\n\nTRUE | c(TRUE, FALSE, FALSE)\n# TRUE TRUE TRUE\n\n# `||` only evaluates the first element of the vector, \"non-vectorized\"\nTRUE || c(TRUE, FALSE, FALSE)\n# TRUE\n\n# order of operators: all AND operators are evaluated before OR operators\n\n5 > 8 || 6 != 8 && 4 > 3.9\n# TRUE\n\n# check if condition is true\nisTRUE(6 > 4)\n\n# evaluates to TRUE (!FALSE)\n!isTRUE(4 < 3)\n\n# function identical() returns TRUE if two objects are identical\nidentical('twins', 'twins')\n\n# also valid for expression\nidentical(5 > 4, 3 < 3.1)\n\n# xor function. Evaluates to TRUE if one expression evaluates to TRUE and the other to FALSE.\n# If both are TRUE or both are FALSE --> FALSE \nxor(5 == 6, !FALSE)\n# TRUE\n\n\nxor(4 >= 9, 8 != 8.0)\n# first expression: FALSE, second: FALSE (!TRUE)\n# xor(FALSE, FALSE) --> FALSE\n\nxor(!isTRUE(TRUE), 6 > -1)\n# first expression: FALSE (!TRUE), second: TRUE\n# xor(FALSE, TRUE) --> TRUE\n\n# random sampling of integers from 1 to 10 without replacement\n# without replacement: each value is only taken once\nints <- sample(10)\n\n# check if integer is larger than 5 in vector ints\nints > 5\n# returns logical vector\n\n# use logical vector to ask other questions about vector\n# which() function takes logical vector and returns the indices of the vector that are TRUE\n\nwhich(c(TRUE, FALSE, TRUE))\n# returns vector c(1,3)\n\n# find indices of ints that are greater than 7\nwhich(ints > 7)\n\n# any() return TRUE if one or more of the elements in the logical vector is TRUE\n# all() return TRUE if every element in the logical vector is TRUE\n\n# see if any element is less than zero\nany(ints < 0)\n# FALSE\n\n# see if all elements are greater than zero\nall(ints > 0)\n# TRUE",
    "created" : 1498050591010.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "140797371",
    "id" : "E2CE4BDE",
    "lastKnownWriteTime" : 1497257907,
    "last_content_update" : 1497257907,
    "path" : "~/Summer project/swirl/R programming/logic.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}